{"version":3,"sources":["utils.js","app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["(function ()\n{\n    /**\n     * GLOBAL CONFIGURATION\n     */\n    window.transitionEnd = window.transitionEnd || \"webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend\";\n\n\n\n    /**\n     * ADD LEADING ZERO TO NUMBER\n     */\n    Number.prototype.lead = function(size) {\n        var s = String(this);\n        while (s.length < (size || 2)) {\n            s = \"0\" + s;\n        }\n        return s;\n    };\n\n\n\n\n\n    /**\n     * GET ELEMENT INNER WIDTH\n     */\n    function getInnerWidth (el)\n    {\n        if (!el) {\n            return 0;\n        }\n\n        var width = 0;\n        var children = el.children;\n        if (children.length>0) {\n            for (var i = 0; i < children.length; i++) {\n                width += children[i].offsetWidth;\n            }\n        }\n        else {\n            width = el.offsetWidth;\n        }\n\n        return width;\n    }\n\n\n\n\n    /**\n     * SCALE FONTS TO FIT WIDTH AND VOID WORD WRAP\n     */\n    var scalableFonts = document.querySelectorAll(\".scale-font\");\n    if (scalableFonts.length>0) {\n        for(var i=0; i<scalableFonts.length; i++) {\n            var el = scalableFonts[i];\n            var parent = el.parentElement;\n            var parentWidth = parent.offsetWidth;\n            var style = window.getComputedStyle(el, null).getPropertyValue('font-size');\n            var fontSize = parseFloat(style);\n            while (parentWidth < getInnerWidth(el)) {\n                fontSize-=0.5;\n                el.style.fontSize = fontSize + 'px';\n            }\n        }\n    }\n})();\n","/**\n * This file should hold global script. Use app.utils for utilities.\n *\n * @category ScreenlyApps\n * @package  WeatherForecast\n * @author   Original Peter Monte <pmonte@screenly.io>\n * @license  https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html  GPLv2\n * @link     https://github.com/wireload\n * @since    0.0.1\n */\n(function() {\n    /**\n     * DOM ELEMENTS\n     */\n    var html = document.querySelector(\"html\");\n    var clockDom = document.getElementById('footer-clock');\n\n\n    /**\n     * HTML DOM ELEMENT HOLDING SERVER DATA\n     */\n    var mmt = moment();\n        mmt.tz(html.getAttribute('data-timezone'));\n\n    /**\n     * SUNSET AND SUNRISE TIMES\n     */\n    var sunSpeed = 10*60000; // As in 10 minutes (winter)\n    var sunriseTimeUnix, sunsetTimeUnix;\n    var sunriseTimeConcat, sunriseEndTimeConcat, sunsetTimeConcat, sunsetEndTimeConcat;\n\n\n    /**\n     * INIT\n     */\n    function init () {\n        sunriseTimeUnix = Number(html.getAttribute('data-sunrise'));\n        sunsetTimeUnix  = Number(html.getAttribute('data-sunset'));\n\n        // PREPARE VARIABLES FOR SUNRISE AND SUNSET INTERVAL\n        var dt = new Date(sunriseTimeUnix*1000);\n        sunriseTimeConcat = Number(dt.getHours()+''+dt.getMinutes());\n        dt = new Date(sunriseTimeUnix*1000+sunSpeed);\n        sunriseEndTimeConcat = Number(dt.getHours()+''+dt.getMinutes());\n\n        dt = new Date(sunsetTimeUnix*1000);\n        sunsetTimeConcat = Number(dt.getHours()+''+dt.getMinutes());\n        dt = new Date(sunsetTimeUnix*1000+sunSpeed);\n        sunsetEndTimeConcat = Number(dt.getHours()+''+dt.getMinutes());\n\n        // START TIME\n        checkTime();\n\n        // CREATE LOOP\n        setInterval(checkTime, 1000);\n    }\n\n\n\n    /**\n     * ADD MINUTES TO UNIX TIME\n     */\n    function unixtimeToDate (unix) {\n        return !unix ? 0 : new Date(unix * 1000);\n    }\n\n\n\n    /**\n     * ADD MINUTES TO UNIX TIME\n     */\n    function unixtimeAddMinutes (unix, min) {\n        if (!unix){\n            return 0;\n        }\n\n        if (!min || min<0){\n            min = 0;\n        }\n\n        var date = unixtimeToDate(unix);\n        date.setMinutes(date.getMinutes() + min);\n        return date.getTime()/1000;\n    }\n\n\n\n    /**\n     * ADD MINUTES TO UNIX TIME\n     */\n    function unixtimeSubtractMinutes (unix, min) {\n        if (!unix) {\n            return 0;\n        }\n\n        if (!min || min<0) {\n            min = 0;\n        }\n\n        var date = unixtimeToDate(unix);\n        date.setMinutes(date.getMinutes() - min);\n        return date.getTime()/1000;\n    }\n\n\n\n    /**\n     * TIME INTERVALL\n     */\n    function checkTime () {\n        var mmtHour = mmt.hours();\n        var mmtMin  = mmt.minutes();\n        var mmtUnix = mmt.unix();\n        var mmtTimeConcat = Number(mmt.format('HHmm'));\n\n\n        /**\n         * CLOCK\n         */\n        clockDom.innerHTML = mmt.format('HH:mm') + '<sup>' + mmt.format('A') + '</sup>';\n\n\n        /**\n         * BACKGROUND BASED ON TIME\n         */\n        if (mmtTimeConcat >= sunriseTimeConcat && mmtTimeConcat <= sunriseEndTimeConcat ) {\n            // SUNRISE\n            html.className = 'bg-sunset';\n            return true;\n        }\n\n        if (mmtTimeConcat > sunriseEndTimeConcat && mmtTimeConcat < sunsetTimeConcat ) {\n            // FULL DAY\n            html.className = 'bg-day';\n            return true;\n        }\n\n        if (mmtTimeConcat >= sunsetTimeConcat && mmtTimeConcat <= sunsetEndTimeConcat ) {\n            // SUNSET\n            html.className = 'bg-sunset';\n            return true;\n        }\n\n        // NONE OF THE ABOVE? IT'S NIGHT\n        html.className = 'bg-night';\n    }\n\n\n\n    /**\n     * ALL DONE LETS INIT\n     */\n    init ();\n})();\n"],"sourceRoot":"/source/"}